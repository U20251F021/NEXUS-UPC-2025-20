#include "pch.h"
#include "Juego.h"
#include "Mundo2.h"
#include "JefeDeAngar.h"//ali
#include "CazaPirata.h"//ene
#include "DronInterferidor.h"//ene
#include "CelulaEnergia.h"//Re
#include "EscudoPlasma.h"//Re
#include "LlaveAcoplamiento.h"//Re

#include "Reloj.h"
#include "Vehiculo.h"
#include "Estudiante.h"

Juego::Juego(vector<Enemigo*> enemigos, vector<Aliado*> aliados, Jugador* jugador, vector<Recurso*> recursos, Mundo1* mundo)
    : enemigos(enemigos), aliados(aliados), jugador(jugador), recursos(recursos), mundo(mundo) {
    
    }

void Juego::datos(Jugador* jugador, Aliado* robot, Recurso* bomba) {
    
    Herramienta h;
    h.asignarcolor(7);
    h.ubicar(205, 2); cout << "VIDAS: " << jugador->getVidas();
    h.ubicar(225, 2); cout << "AYUDAS: " << robot->getAyudas();
    h.ubicar(245, 2); cout << "BOMBAS: " << bomba->getCantidad();
    
}

void Juego::datosNivel2(Jugador* jugador) {
    Herramienta h;
    h.asignarcolor(7);
    h.ubicar(205, 3);  cout << "VIDAS:   " << jugador->getVidas();
    h.ubicar(205, 4);  cout << "ENERGIA: " << jugador->getEnergia() << "/3";
    h.ubicar(205, 5);  cout << "ESCUDOS: " << jugador->getEscudos();
    h.asignarcolor(8);
    h.ubicar(205, 7);  cout << "Objetivo: 3 celulas -> validar -> llave";
}

void Juego::nivel1(Jugador* jugador) {

    Mundo1* mundo1 = new Mundo1();
   
    Herramienta* h = new Herramienta();

    //RECURSOS
    // :
    vector<Recurso*> recursos;
    Bomba* bomba = new Bomba(160, 25, 17, 10, 1);
    recursos.push_back(bomba);

    //ENEMIGOS

    vector<Enemigo*> enemigos;
    Enemigo* drone = new Drone(177, 20, 23, 4);
    enemigos.push_back(drone);

    Enemigo* torreta = new Torreta(160, 50, 16, 13);
    enemigos.push_back(torreta);

    //ALIADOS

    vector<Aliado*> aliados;
    Aliado* robot = new Robot(180, 30, 6, 4);
    aliados.push_back(robot);

    string contexto = "El jugador encarna a Animen, un joven Raime que aterriza en un planeta desolado de la Galaxia Perdida, donde el enemigo ha dejado bombas capaces de destruir sistemas enteros. Su mision: desactivarlas antes de que detonen y acaben con toda forma de vida. Al inicio, la IA de su nave le ofrece ayuda, entregandole codigos y coordenadas para localizar las bombas. Sin embargo, con el tiempo, el jugador empieza a notar que la IA actua de forma extraña, tomando decisiones por cuenta propia. Esto pondra a prueba su dependencia tecnologica y su capacidad de pensar por si mismo. Acompañando al jugador esta un pequeño robot de apoyo, creado por Animen, que lo sigue constantemente y lo ayuda con informacion y soporte mecanico sin intereses ocultos. Las bombas, una vez desactivadas, liberan energia pura que puede usarse para activar mecanismos, torretas defensivas o abrir nuevos caminos hacia su objetivo. ";

    string bienvenida = "Bienvenido a la Galaxia Perdida. Soy tu Asistente Cognitivo Operativo, designado para guiarte en esta mision.";

    string IAexplicacion = "El enemigo ha dejado bombas de aniquilacion capaces de borrar sistemas completos. Tu mision es localizarlas y desactivarlas antes de que detonen.";

    string AstronautaIntro = "Cual es la situacion? He llegado para cumplir la mision y proteger lo que queda de nuestra galaxia.";

    string confIA = "Te proporcionare las coordenadas y los codigos de desactivacion. Confia en mis calculos... y actua con precision. El destino de muchas vidas depende de ti.";

    int ix = 117;
    int iy = 45;

    mundo1->dibujarFondo();
    mundo1->dibujarContornos(1, 200, 20, 60);
    mundo1->dibujarContornos(201, 260, 1, 60);

    //CONTEXTO:
   h->dialogo(55, 145, 24, 32, contexto,7);
   mundo->dibujarIAcuerpo(ix, iy);
   
   //ANIMACION:
   while (jugador->getX() < 90) { 
       jugador->borrar();
       jugador->setX(jugador->getX() + 1);
       jugador->dibujar();
       robot->dibujar();
       _sleep(10);
   }
   
   
   //DIALOGO:
    _sleep(2000);
    h->borrarDialogo(55, 145, 24, 32, contexto);
    
    jugador->dibujar();
    mundo->dibujarIAcuerpo(117, 45);
    
    _sleep(500);
    
    h->dialogo(103, 148, 36, 39, bienvenida,2);
    _sleep(3000);
    h->borrarDialogo(103, 148, 36, 39, bienvenida);
    
    _sleep(500);
    
    h->dialogo(75, 110, 38, 41, AstronautaIntro, 3);
    _sleep(3000);
    h->borrarDialogo(75, 110, 38, 41, AstronautaIntro);
    
    _sleep(500);
    
    h->dialogo(103, 148, 36, 43, IAexplicacion, 2);
    _sleep(4000);
    h->borrarDialogo(103, 148, 36, 43, IAexplicacion);
    
    _sleep(500);
    
    h->dialogo(103, 148, 36, 43, confIA, 2);
    _sleep(4000);
    h->borrarDialogo(103, 148, 36, 43, confIA);
    
    _sleep(500);
   
   //ANIMACION:
    
    while (jugador->getX() > 1) {
        
        jugador->borrar();
        jugador->setX(jugador->getX() - 1);
        jugador->dibujar();
        robot->dibujar();
        _sleep(10);
    
        mundo->borrarIAcuerpo(ix, iy);
        if (ix < 182) { ix++; }
        mundo->dibujarIAcuerpo(ix, iy);
    }
    
    _sleep(500);
    mundo->borrarIAcuerpo(ix, iy);
    _sleep(500);
    mundo->dibujarIA();
    
    mundo->dibujarContornos(1, 200, 20, 60);
    mundo->dibujarContornos(201, 260, 1, 60);

    while (jugador->getVidas()>0 && nivelPasado == false) {
    
        this->datos(jugador, robot,bomba);
        jugador->animar();
        robot->dibujar();
		robot->aplicarEfectoAlJugador(*jugador);
        bomba->dibujar();
        bomba->aplicarEfectoAlJugador(*jugador);
        if (bomba->getCantidad() >= 5) { nivelPasado = true; }
        torreta->animar(*jugador);
        torreta->aplicarEfectoAlJugador(*jugador);
        drone->animar(*jugador);
        drone->animar(*jugador);
		drone->aplicarEfectoAlJugador(*jugador);
    }

	system("cls");

    

}
void Juego::nivel2(Jugador* jugador) {
    if (!mundo2) mundo2 = new Mundo2();
    jugador->setVidas(3);



    mundo2->dibujarFondo();



    const int CX1 = 1, CX2 = 200;
    const int CY1 = 20, CY2 = 60;
    mundo2->dibujarContornos(CX1, CX2, CY1, CY2);
    mundo2->dibujarContornos(201, 260, 1, 60); 



    // Animación simple del jugador al inicio
    {
        int destinoX = 60;
        while (jugador->getX() < destinoX) {
            jugador->borrar();
            jugador->setX(jugador->getX() + 1);
            jugador->dibujar();
            _sleep(8);
        }
    }

    //LIMPIAR VECTORES DEL NIVEL ANTERIOR 
    for (Enemigo* e : enemigos) delete e; enemigos.clear();
    for (Aliado* a : aliados)  delete a; aliados.clear();
    for (Recurso* r : recursos)  delete r; recursos.clear();

    //CREAR ENTIDADES DEL MUNDO 2 
    // Aliado
    JefeDeHangar* jefe = new JefeDeHangar(168, 40, 10);
    aliados.push_back(jefe);

    // Llave 
    LlaveAcoplamiento* llave = new LlaveAcoplamiento(160, 42);
    llave->setEstado(false);
    bool llaveDisponible = false;

    // Enemigos
    const int MAX_CAZAS = 2;
    const int MAX_DRONES = 2;

    for (int i = 0; i < MAX_CAZAS; ++i) {
        CazaPirata* c = new CazaPirata();
        c->generarPosAleatoria();
        enemigos.push_back(c);
    }
    for (int i = 0; i < MAX_DRONES; ++i) {
        DronInterferidor* d = new DronInterferidor();
        d->generarPosAleatoria();
        enemigos.push_back(d);
    }

    // Recursos
    const int MAX_CEL = 1, MAX_ESC = 1;
    for (int i = 0; i < MAX_CEL; ++i) {
        CelulaEnergia* c = new CelulaEnergia();
        c->generarPosAleatoria();
        recursos.push_back(c);
    }
    for (int i = 0; i < MAX_ESC; ++i) {
        EscudoPlasma* s = new EscudoPlasma();
        s->generarPosAleatoria();
        recursos.push_back(s);
    }

    // bucle centrl del juego
    bool nivel2Terminado = false;
    while (jugador->getVidas() > 0 && !nivel2Terminado) {
        
        datosNivel2(jugador);
        mundo2->dibujarVillano(160, 2);

        Herramienta dbg;
        dbg.asignarcolor(7);
        dbg.ubicar(205, 10); cout << "Jefe: x=" << jefe->getX() << " y=" << jefe->getY()
            << " w=" << jefe->getAncho() << " h=" << jefe->getAlto();

        dbg.ubicar(205, 11); cout << "Jugador: x=" << jugador->getX() << " y=" << jugador->getY();
        
        
        jugador->animar();
        Rectangle rj = jugador->getRect();

        
        for (Aliado* a : aliados) a->dibujar();

       
        if (jugador->getEnergia() >= 3 && !llaveDisponible) {

            Rectangle rAli = jefe->obtenerRectangulo();

            if (rAli.IntersectsWith(rj)) {
                jefe->aplicarEfectoAlJugador(*jugador);
                if (jefe->llaveAutorizada()) {
                    llaveDisponible = true;
                    llave->setEstado(true);
                    llave->setX(100);
                    llave->setY(40);
                }
            }
        }

       
        if (llaveDisponible && llave->activo()) {
            llave->animar();
            Rectangle rl = llave->obtenerRectangulo();
            if (rl.IntersectsWith(rj)) {
                llave->aplicarEfectoAlJugador(*jugador);
                this->setEstadoNivel(true);
				nivel2Terminado = true;
            }
        }

        // Enemigos animación y colisión
        for (size_t i = 0; i < enemigos.size(); ++i) {
            Enemigo* e = enemigos[i];

            e->animar(*jugador);

            Rectangle re = e->obtenerRectangulo();
            if (re.IntersectsWith(rj) && e->activo()) {
               
                if (jugador->consumirEscudo()) {
                    e->borrar();
                    delete e;         
                    Enemigo* nuevo = (i < (size_t)MAX_CAZAS)
                        ? (Enemigo*)new CazaPirata()
                        : (Enemigo*)new DronInterferidor();
                    nuevo->generarPosAleatoria();
                    enemigos[i] = nuevo;
                    continue;
                }

                 
                e->aplicarEfectoAlJugador(*jugador);
                e->borrar();           
            }

             
            if (!e->activo()) {
                e->borrar();
                delete e;
                Enemigo* nuevo = (i < (size_t)MAX_CAZAS)
                    ? (Enemigo*)new CazaPirata()
                    : (Enemigo*)new DronInterferidor();
                nuevo->generarPosAleatoria();
                enemigos[i] = nuevo;
            }
        }

        // Recursos: animar + colisión  
        for (Recurso* r : recursos) {
            r->animar();
            Rectangle rr = r->obtenerRectangulo();
            if (rr.IntersectsWith(rj) && r->activo()) {
                r->aplicarEfectoAlJugador(*jugador); 
            }
        }
        for (Recurso* r : recursos) {
            if (!r->activo()) {
                bool esCelula = (dynamic_cast<CelulaEnergia*>(r) != nullptr);
                int prob = esCelula ? 40 : 25;
                if ((rand() % 100) < prob) {
                    r->generarPosAleatoria();
                    r->setEstado(true);
                }
            }
        }

        _sleep(10);
    }

    //CIERRE 
    {
        Herramienta h;
        Console::Clear();
        if (jugador->getVidas() > 0 && jugador->getTieneLlave()) {
            h.asignarcolor(10);
            string ok = "Portal abierto. Nivel 2 completado.";
            h.dialogo(90, 160, 30, 36, ok, 6);
            _sleep(2400);
            h.borrarDialogo(90, 160, 30, 36, ok);
            nivelPasado = true;
        }
        else if (jugador->getVidas() <= 0) {
            h.asignarcolor(12);
            string fail = "Has perdido todas las vidas en el hangar...";
            h.dialogo(90, 160, 30, 36, fail, 6);
            _sleep(2400);
            h.borrarDialogo(90, 160, 30, 36, fail);
        }
    }

    delete llave;
}


void Juego::nivel3(Jugador* jugador) {
    jugador->setVidas(3);
	jugador->setX(1);
	jugador->setY(45);
	jugador->setSkin(3); // cambia skin a estudiante
	Mundo3* mundo3 = new Mundo3();
    srand(time(NULL));
    Herramienta* h;
    Console::SetCursorPosition(20, 30);
    cout << "Si una IA puede tomar decisiones basadas en la logica para el bien de todos, que proposito queda para el pensamiento critico y la toma de decisiones humana?";
    _sleep(5000);
    h->borrarDialogo(20, 180, 30, 32, "Si una IA puede tomar decisiones basadas en la logica para el bien de todos, ¿qué proposito queda para el pensamiento critico y la toma de decisiones humana?");

    // ==== LIMPIAR VECTORES DEL NIVEL ANTERIOR ====
    for (Enemigo* e : enemigos) delete e; enemigos.clear();
    for (Aliado* a : aliados)  delete a; aliados.clear();
    for (Recurso* r : recursos)  delete r; recursos.clear();


    Reloj* reloj = new Reloj();
    reloj->setTamaño(8, 6);
    reloj->generarPosAleatoria();
    recursos.push_back(reloj);

    VehiculoIA* vehiculo = new VehiculoIA();
    vehiculo->setTamaño(13, 9);
    vehiculo->generarPosAleatoria();
    enemigos.push_back(new VehiculoIA(30, 20, 13, 9));

    VehiculoIA* vehiculo2 = new VehiculoIA();
    vehiculo2->setTamaño(13, 9);
    vehiculo2->generarPosAleatoria();
    enemigos.push_back(vehiculo2);


    Estudiante* estudiante = new Estudiante();
    estudiante->setTamaño(10, 9);
    estudiante->generarPosAleatoria();
    aliados.push_back(estudiante);



    string contexto = " Bienvenido al tercer nivel jugador. Ya estas cada vez mas cerca de acabar esto.. Que bue-no no?! jaja.. En fin eso que jugaste antes podria convertirse en nuestro futuro si es que las herramientas que tenemos ahora no se usan correctamente. Puede que sea un poco extre-mo... pero nunca se sabe. En fin, estoy aqui para contarte la siguiente parte de la histo-ria!. Ahora iras a la universidad en un colaborativo, tendras a Bart de companero, que suerte no?";
    string bienvenida = "Buenas buenas, hace mucho tiempo que no te ve-ia! que tal estas?... Sabes que dia es hoy? El dia de los acertijos! recuerda que tienes a un companero IA en tu celular para que te ayudes";
    string IAexplicacion = "Asi es!... Por cierto!Ten cuidado con los ca-rros cuando vayas a la universidad, la IA que los conduce ultimamente anda fallando, buena suerte! Ah! y casi lo olvido, no olvides po-nerte al dia con tus companeros";
    string IntroColab = "Ohh... Entonces el me ayudara y me brindara pistas?";
    string BART = "Hola! soy tu asistente IA BART, te ayudare con los acertijos en este dia especial!";


    int ix = 117;
    int iy = 45;

    mundo3->dibujarFondo();
    mundo3->dibujarContornos(1, 200, 20, 60);
    mundo3->dibujarContornos(201, 260, 1, 60);

    h->dialogo(55, 145, 24, 32, contexto, 7);
    mundo3->dibujarGuiaPersonaje(ix, iy);


    while (jugador->getX() < 90) {
        jugador->borrar();
        jugador->setX(jugador->getX() + 1);
        jugador->dibujar();

        _sleep(10);
    }



    _sleep(20000);
    h->borrarDialogo(55, 145, 24, 32, contexto);

    jugador->dibujar();
    mundo3->dibujarGuiaPersonaje(117, 45);

    _sleep(500);

    h->dialogo(103, 148, 36, 40, bienvenida, 2);
    _sleep(5000);
    h->borrarDialogo(103, 148, 36, 40, bienvenida);

    _sleep(500);

    h->dialogo(75, 110, 38, 41, IntroColab, 3);
    _sleep(5000);
    h->borrarDialogo(75, 110, 38, 41, IntroColab);

    _sleep(500);

    h->dialogo(103, 148, 36, 43, IAexplicacion, 2);
    _sleep(4000);
    h->borrarDialogo(103, 148, 36, 43, IAexplicacion);

    _sleep(500);





    //ANIMACION:

    while (jugador->getX() > 1) {

        jugador->borrar();
        jugador->setX(jugador->getX() - 1);
        jugador->dibujar();
        _sleep(10);

        mundo3->borrarGuiaPersonaje(ix, iy);
        if (ix < 182) { ix++; }
        mundo3->borrarGuiaPersonaje(ix, iy);
    }

    _sleep(500);
    mundo3->borrarGuiaPersonaje(ix, iy);
    _sleep(500);
    mundo3->dibujarGuia();

    h->dialogo(210, 241, 30, 35, BART, 6);
    h->ubicar(202, 4); cout << "MISION: responder los acertijos de tus companeros";
    h->ubicar(202, 5); cout << "Atrapa los relojes para conseguir mas tiempo!";
    int contador = 0;

    mundo->dibujarContornos(1, 200, 20, 60);
    mundo->dibujarContornos(201, 260, 1, 60);

    reloj->generarPosAleatoria();
    enemigos[0]->generarPosAleatoria();
    enemigos[1]->generarPosAleatoria();

    while (jugador->getVidas() > 0 && reloj->getCantidad() > 0 && nivelPasado == false) {


        this->datos(jugador, estudiante, reloj);
        jugador->animar();

        estudiante->dibujar();
        estudiante->aplicarEfectoAlJugador(*jugador);


        reloj->dibujar();
        reloj->aplicarEfectoAlJugador(*jugador);



        for (int i = 0; i < enemigos.size(); i++) {

            enemigos[i]->dibujar();
            enemigos[i]->animar(*jugador);
            enemigos[i]->aplicarEfectoAlJugador(*jugador);
        }


        contador++;
        if (contador >= 20) {
            reloj->setCantidad(reloj->getCantidad() - 1);
            contador = 0;

        }

        if (estudiante->getAyudas() >= 3) { nivelPasado = true; }
    }




}

void Juego::presentacion() {
    int matrizpresentacion[60][260] = {

            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,7,7,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,7,7,7,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,7,7,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,7,7,7,7,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,7,7,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,7,7,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,7,7,7,7,0,0,0,7,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,7,7,0,0,0,7,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,7,7,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,7,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,7,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0,0,0,7,0,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,7,0,0,0,0,0,7,0,0,7,7,0,0,0,0,0,0,0,7,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,7,0,0,0,0,0,7,0,0,7,0,7,0,0,0,0,0,0,7,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,7,0,0,7,0,0,7,0,0,7,0,0,0,7,0,0,0,7,7,7,0,0,0,0,7,0,0,0,7,0,0,7,7,7,7,0,0,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,7,0,0,0,0,0,7,0,0,7,0,0,7,0,0,0,0,0,7,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,7,0,0,7,0,0,7,0,0,7,7,0,7,7,0,0,0,7,0,7,0,0,0,0,7,7,0,0,7,0,0,7,0,0,7,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,7,0,0,0,0,0,7,0,0,7,0,0,0,7,0,0,0,0,7,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,7,0,0,7,0,0,7,0,7,0,7,0,0,7,0,0,0,7,0,0,0,7,0,7,0,7,0,0,7,0,0,7,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,7,0,0,0,0,0,7,0,0,7,0,0,0,0,7,0,0,0,7,0,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,7,0,0,7,0,0,7,0,0,7,0,0,0,7,0,7,7,7,7,7,7,7,0,0,7,0,0,7,7,0,0,7,0,0,7,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,7,0,0,0,0,0,7,0,0,7,0,0,0,0,0,7,0,0,7,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,8,8,8,2,2,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,7,0,0,7,7,7,7,0,0,7,0,0,0,7,0,7,0,0,0,0,0,7,0,0,7,0,0,0,7,0,0,7,7,7,7,0,0,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,7,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0,7,0,7,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,8,8,8,7,7,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,8,5,5,5,13,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,7,0,0,0,0,0,7,0,0,7,0,0,0,0,0,0,0,7,7,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,8,7,7,7,7,7,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,7,7,7,7,7,7,7,0,0,7,0,0,0,0,0,0,0,0,7,0,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,7,7,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,3,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,13,5,5,5,5,13,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,3,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,8,8,8,8,0,0,0,7,0,0,0,8,0,15,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,7,0,2,0,0,2,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,3,3,3,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,0,15,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,13,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,7,0,7,7,7,7,0,0,7,7,7,7,0,7,8,8,0,0,15,0,0,7,0,0,12,12,12,12,12,12,12,0,0,7,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,13,5,5,5,5,5,5,5,13,13,13,13,13,5,5,5,5,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,7,7,7,7,7,0,4,4,0,7,7,7,7,7,8,8,0,0,15,0,0,7,0,0,12,4,4,4,4,4,12,0,0,7,0,0,8,0,0,0,0,0,0,0,8,8,8,7,7,7,7,7,7,8,8,8,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,13,5,5,5,5,5,13,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,7,7,7,7,7,0,0,7,7,7,7,7,8,8,8,0,0,15,0,0,7,0,0,12,4,4,4,4,4,12,0,0,7,0,0,8,0,0,0,0,0,0,0,8,8,7,7,0,0,0,0,7,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,5,5,5,13,5,13,13,13,13,5,13,5,5,5,5,5,13,5,5,13,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,7,8,8,7,7,8,8,7,8,8,8,8,8,0,0,15,0,0,7,0,0,12,4,4,4,4,4,12,0,0,7,0,0,8,0,0,0,0,0,0,0,8,8,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,5,5,5,13,5,13,5,5,13,5,13,5,13,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,6,6,6,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,7,8,8,8,8,8,8,8,8,7,8,8,8,8,0,0,15,0,0,7,0,0,12,12,12,12,12,12,12,0,0,7,0,0,8,0,0,0,0,0,0,0,8,7,0,0,0,0,7,0,0,0,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,5,5,5,13,5,5,13,5,5,5,13,5,5,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,6,0,6,6,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,7,0,0,0,0,0,0,0,0,0,0,0,7,0,0,8,0,0,0,0,0,0,0,8,7,0,0,0,0,0,7,0,0,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,13,5,5,5,5,5,5,13,13,13,5,5,5,5,5,13,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,6,6,6,6,6,6,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,8,0,0,0,0,0,0,0,8,8,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,6,6,6,6,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,7,7,7,7,7,7,7,7,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,8,8,8,7,0,0,0,0,7,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,5,5,5,5,13,5,5,5,13,5,5,5,5,13,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,6,6,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,8,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,13,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,8,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,5,5,5,5,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,8,0,0,0,0,0,0,0,7,7,8,7,7,7,7,7,7,8,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,5,5,5,5,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,8,0,0,0,0,0,0,0,7,7,8,7,7,7,7,7,7,8,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,5,5,5,5,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,8,0,0,0,0,0,0,0,8,8,8,7,7,8,8,7,7,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,13,13,5,5,5,13,5,13,13,13,13,5,5,13,13,13,5,5,5,13,13,13,13,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,6,8,15,15,15,15,15,8,6,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,8,0,0,0,0,0,0,0,8,8,8,7,7,8,8,7,7,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,13,5,5,13,13,13,5,13,5,5,5,13,13,13,5,5,5,13,13,13,13,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,15,8,8,8,15,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,15,0,8,0,0,0,0,0,0,0,8,8,7,7,7,8,8,7,7,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,8,8,8,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    };
    Herramienta h;
    for (int f = 0; f < 60; f++) {
        for(int c = 0; c < 260; c++) {
            h.ubicar(c, f); h.asignarcolor(matrizpresentacion[f][c]); cout << char(219);
		}
    }
}

void Juego::instrucciones(int nivel) {

 switch (nivel)
    {
 case 1: {

     Herramienta h;
     Robot* robot = new Robot(5, 5, 10, 10);
     Bomba* bomba = new Bomba(5, 5, 10, 10, 1);
     Torreta* torreta = new Torreta(5, 5, 10, 10);
     Drone* drone = new Drone(5, 5, 10, 10);
     Jugador* jugadorp = new Jugador(5, 5, 1);
     Mundo1 mundo;


     robot->setX(20); robot->setY(12);
     h.ubicar(10, 22); h.asignarcolor(3); cout << "ROBOT ALIADO: OTORGA +1 VIDA ";
     h.ubicar(10, 24); h.asignarcolor(3); cout << "(SOLO SI TIENES MENOS DE 3)";

     bomba->setX(70); bomba->setY(10);
     h.ubicar(60, 22); h.asignarcolor(3); cout << "BOMBA RECURSO: RECOGE 5 PARA GANAR ";

     torreta->setX(120); torreta->setY(7);
     h.ubicar(110, 22); h.asignarcolor(3); cout << "TORRETA ENEMIGO: DISPARA PROYECTILES ";
     h.ubicar(110, 24); h.asignarcolor(3); cout << "(TE QUITA 1 VIDA POR CADA COLISION)";

     drone->setX(170); drone->setY(12);
     h.ubicar(160, 22); h.asignarcolor(3); cout << "DRONE ENEMIGO: EXPLOTA AL COLISIONAR ";
     h.ubicar(160, 24); h.asignarcolor(3); cout << "(TE QUITA 1 VIDA POR CADA COLISION)";

     jugadorp->setX(120); jugadorp->setY(33);
     h.ubicar(114, 52); h.asignarcolor(3); cout << "JUGADOR: TIENE 3 VIDAS ";
     h.ubicar(106, 54); h.asignarcolor(3); cout << "(SE MUEVE CON LAS TECLAS CONVENCIONALES)";

     mundo.dibujarIAcuerpo(220, 2);
     h.ubicar(210, 22); h.asignarcolor(3); cout << "IA ASISTENTE: MUESTRA LA POSICION Y ";
     h.ubicar(210, 24); h.asignarcolor(3); cout << "OTORGA TODAS LAS CLAVES DE LAS BOMBAS";

     robot->dibujar();
     bomba->dibujar();
     torreta->dibujar();
     drone->dibujar();
     jugadorp->dibujar();




     if (_getch());
     system("cls");
     break;
 }
    case 2: {

        Herramienta h;

        const int xi = 30, xf = 150;
        int y0 = 15;
        int alto = 2;

        string contexto2 =
            "Tras desactivar las bombas, la IA comprometida forzo a Animen a Andromeda. "
            "Despierta sin control de la nave y halla el sector devastado. El unico sitio activo: el Hangar.";

        string objetivo2 =
            "Objetivo: Reune 3 Celulas de Energia, presentate ante el Jefe del Hangar y consigue la Llave de "
            "Acoplamiento para abrir el portal y escapar.";

        string villano2 =
            "Jefe del Hangar: 'Aqui no sales con fuerza bruta. Trae energia y demuestra que sabes decidir.'";

        string reflexiva2 =
            "Reflexiona: Sin la IA, no basta con moverte; debes moverte CUANDO corresponde. Observa caidas y "
            "trayectorias: ataca cuando el riesgo baja y el objetivo sube. Evita el impulso; busca el momento oportuno.";

        h.asignarcolor(11);
        h.ubicar(70, y0 - 2); cout << "GALAXIA ANDROMEDA - HANGAR";

        h.asignarcolor(6);
        h.dialogo(xi, xf, y0 + 0, y0 + alto, contexto2, 5);

        h.asignarcolor(11);
        h.dialogo(xi, xf, y0 + 3, y0 + 3 + alto, objetivo2, 3);

        h.asignarcolor(14);
        h.dialogo(xi, xf, y0 + 6, y0 + 6 + alto, villano2, 12);

        h.asignarcolor(10);
        h.dialogo(xi, xf, y0 + 9, y0 + 9 + alto + 1, reflexiva2, 6);

        h.asignarcolor(15);
        h.ubicar(70, 40); cout << "Presiona una tecla para ver las instrucciones...";
        _getch();

        Console::Clear();

        h.asignarcolor(7);


        const int baseX = 6;
        const int textX = 40;
        int yAli = 13;
        int yRec = 26;
        int yEne = 39;


        h.asignarcolor(11);
        h.ubicar(70, 10); std::cout << "INSTRUCCIONES - MUNDO 2 (HANGAR)";
        h.asignarcolor(7);


        {

            JefeDeHangar demoJefe(baseX, yAli, 10);
            demoJefe.dibujar();


            h.asignarcolor(10);
            h.ubicar(textX, yAli);     cout << "ALIADO: Jefe del Hangar";
            h.asignarcolor(7);
            h.ubicar(textX, yAli + 1); cout << "- Colision: abre 1 pregunta tactica.";
            h.ubicar(textX, yAli + 2); cout << "- Si aciertas: habilita la Llave de Acoplamiento.";
            h.ubicar(textX, yAli + 3); cout << "- Si fallas: vuelve cuando tengas criterio claro.";


        }


        {
            CelulaEnergia    rCel(baseX + 1, yRec);     rCel.dibujar();
            EscudoPlasma     rEsc(baseX + 15, yRec);     rEsc.dibujar();
            LlaveAcoplamiento rKey(baseX + 26, yRec);    rKey.dibujar();


            h.asignarcolor(9);
            h.ubicar(textX, yRec);         cout << "RECURSOS:";
            h.asignarcolor(7);
            h.ubicar(textX, yRec + 1);     cout << "- Celula de Energia: +1 energia (max 3).";
            h.ubicar(textX, yRec + 2);     cout << "- Escudo de Plasma: +1 escudo (absorbe 1 golpe).";
            h.ubicar(textX, yRec + 3);     cout << "- Llave de Acoplamiento: abre el portal.";
            h.ubicar(textX, yRec + 4);     cout << "  (Solo aparece si el Jefe te autoriza).";


        }

        {

            CazaPirata       eCaza(baseX + 2, yEne);    eCaza.dibujar();
            DronInterferidor eDron(baseX + 20, yEne);    eDron.dibujar();


            h.asignarcolor(12);
            h.ubicar(textX, yEne);         cout << "ENEMIGOS:";
            h.asignarcolor(7);
            h.ubicar(textX, yEne + 1);     cout << "- Caza Pirata: colision = -1 vida";
            h.ubicar(textX, yEne + 2);     cout << "  (si tienes escudo, lo consume primero).";
            h.ubicar(textX, yEne + 3);     cout << "- Dron Interferidor: colision = -1 energia";
            h.ubicar(textX, yEne + 4);     cout << "  (si tienes escudo, lo consume primero).";


        }


        h.asignarcolor(14);
        h.ubicar(70, 50); cout << "Consejo: observa trayectorias y mueve CUANDO conviene, no por impulso.";
        h.asignarcolor(15);
        h.ubicar(90, 52); cout << "Presiona una tecla para continuar...";
        _getch();
        Console::Clear(); break;

    }

    default:
        break;
 }


}

void Juego::ganaste() {

  
    Herramienta h;
         h.ubicar(60,20);h.asignarcolor(2);cout<<"::::::::      :::     ::::    :::     :::      :::::::: ::::::::::: ::::::::::      :::::::::  ";
         h.ubicar(60,21);h.asignarcolor(2);cout<<":+:    :+:   :+: :+:   :+:+:   :+:   :+: :+:   :+:    :+:    :+:     :+:         :+: :+:    :+:"; 
         h.ubicar(60,22);h.asignarcolor(2);cout<<"+:+         +:+   +:+  :+:+:+  +:+  +:+   +:+  +:+           +:+     +:+             +:+    +:+"; 
         h.ubicar(60,23);h.asignarcolor(2);cout<<":#:        +#++:++#++: +#+ +:+ +#+ +#++:++#++: +#++:++#++    +#+     +#++:++#        +#+    +:+"; 
         h.ubicar(60,24);h.asignarcolor(2);cout<<"+#+   +#+# +#+     +#+ +#+  +#+#+# +#+     +#+        +#+    +#+     +#+             +#+    +#+"; 
         h.ubicar(60,25);h.asignarcolor(2);cout<<"#+#    #+# #+#     #+# #+#   #+#+# #+#     #+# #+#    #+#    #+#     #+#         #+# #+#    #+#"; 
         h.ubicar(60,26);h.asignarcolor(2);cout<<" ########  ###     ### ###    #### ###     ###  ########     ###     ##########      ######### ";
         _getch;
   


}

void Juego::perdiste() {

  
        Herramienta h;
        h.ubicar(60,20);h.asignarcolor(4);cout<<":::::::::  :::::::::: :::::::::  ::::::::: ::::::::::: :::::::: ::::::::::: ::::::::::                 :::";
        h.ubicar(60,21);h.asignarcolor(4);cout<<":+:    :+: :+:        :+:    :+: :+:    :+:    :+:    :+:    :+:    :+:     :+:                       :+: ";
        h.ubicar(60,22);h.asignarcolor(4);cout<<"+:+    +:+ +:+        +:+    +:+ +:+    +:+    +:+    +:+           +:+     +:+        +:+:+:+:+:+:+ +:+  ";
        h.ubicar(60,23);h.asignarcolor(4);cout<<"+#++:++#+  +#++:++#   +#++:++#:  +#+    +:+    +#+    +#++:++#++    +#+     +#++:++#                 +#+  ";
        h.ubicar(60,24);h.asignarcolor(4);cout<<"+#+        +#+        +#+    +#+ +#+    +#+    +#+           +#+    +#+     +#+        +#+#+#+#+#+#+ +#+  ";
        h.ubicar(60,25);h.asignarcolor(4);cout<<"#+#        #+#        #+#    #+# #+#    #+#    #+#    #+#    #+#    #+#     #+#                       #+# ";
        h.ubicar(60,26);h.asignarcolor(4);cout<<"###        ########## ###    ### ######### ########### ########     ###     ##########                 ###";
        _getch;
		
}   